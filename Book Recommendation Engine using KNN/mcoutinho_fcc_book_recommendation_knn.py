# -*- coding: utf-8 -*-
"""mcoutinho_fcc_book_recommendation_knn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19AqlW0y5KhvCtBydAQl1pDnbPPAaL0bT
"""

# import libraries (you may add additional imports but you may not have to)
import numpy as np
import pandas as pd
from scipy.sparse import csr_matrix
from sklearn.neighbors import NearestNeighbors
import matplotlib.pyplot as plt

# get data files
!wget https://cdn.freecodecamp.org/project-data/books/book-crossings.zip

!unzip book-crossings.zip

books_filename = 'BX-Books.csv'
ratings_filename = 'BX-Book-Ratings.csv'

# import csv data into dataframes
df_books = pd.read_csv(
    books_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['isbn', 'title', 'author'],
    usecols=['isbn', 'title', 'author'],
    dtype={'isbn': 'str', 'title': 'str', 'author': 'str'})

df_ratings = pd.read_csv(
    ratings_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['user', 'isbn', 'rating'],
    usecols=['user', 'isbn', 'rating'],
    dtype={'user': 'int32', 'isbn': 'str', 'rating': 'float32'})

# Load DataFrames
# Assuming df_books and df_ratings are already loaded

# Display the first few rows of each DataFrame
df_books.head()
df_ratings.head()

# Check for null values in df_books
df_books.isnull().sum()

# Check for null values in df_ratings
df_ratings.isnull().sum()

# Remove null values from df_books
df_books.dropna(inplace=True)

# Check for null values again in df_books
df_books.isnull().sum()

# Filter Users and Books
ratings = df_ratings['user'].value_counts()
ratings.sort_values(ascending=False).head()

# Remove users with fewer than 200 ratings
df_ratings_rm = df_ratings[~df_ratings['user'].isin(ratings[ratings < 200].index)]

# Check the shape of the filtered df_ratings_rm DataFrame
df_ratings_rm.shape

# Identify and remove books with fewer than 100 ratings
ratings = df_ratings['isbn'].value_counts()
ratings.sort_values(ascending=False).head()

# Remove books with fewer than 100 ratings
df_ratings_rm = df_ratings_rm[~df_ratings_rm['isbn'].isin(ratings[ratings < 100].index)]

# Check the shape of the further filtered df_ratings_rm DataFrame
df_ratings_rm.shape

# Create a Pivot Table
df = df_ratings_rm.pivot_table(index=['user'], columns=['isbn'], values='rating').fillna(0).T
df.head()

# Set index of the pivot table to book titles
df.index = df.join(df_books.set_index('isbn'))['title']

# Sort the pivot table index
df = df.sort_index()
df.head()

# System with Nearest Neighbors
# Assuming df is the prepared DataFrame

# Specify a book title for which you want to find similar books
title = 'The Queen of the Damned (Vampire Chronicles (Paperback))'

# Check the shape of a specific row in the pivot table
df.loc[title].shape

# Create and fit the Nearest Neighbors model
model = NearestNeighbors(metric='cosine')
model.fit(df.values)

# Check the shape of a specific row in the pivot table
df.iloc[0].shape

# Calculate distances and indices of the nearest neighbors
distance, indices = model.kneighbors([df.loc[title].values], n_neighbors=6)

# Display distances and indices
print(distance)
print(indices)

# Get titles and distances in a DataFrame, sorted by distance
result_df = pd.DataFrame({
    'title': df.iloc[indices[0]].index.values,
    'distance': distance[0]
}).sort_values(by='distance', ascending=False)

# Display the result DataFrame
result_df

# function to return recommended books - this will be tested
def get_recommends(title = ""):
  try:
    book = df.loc[title]
  except KeyError as e:
    print('The given book', e, 'does not exist')
    return

  distance, indice = model.kneighbors([book.values], n_neighbors=6)

  recommended_books = pd.DataFrame({
      'title'   : df.iloc[indice[0]].index.values,
      'distance': distance[0]
    }) \
    .sort_values(by='distance', ascending=False) \
    .head(5).values

  return [title, recommended_books]

get_recommends("The Queen of the Damned (Vampire Chronicles (Paperback))")

books = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
print(books)

def test_book_recommendation():
  test_pass = True
  recommends = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
  if recommends[0] != "Where the Heart Is (Oprah's Book Club (Paperback))":
    test_pass = False
  recommended_books = ["I'll Be Seeing You", 'The Weight of Water', 'The Surgeon', 'I Know This Much Is True']
  recommended_books_dist = [0.8, 0.77, 0.77, 0.77]
  for i in range(2):
    if recommends[1][i][0] not in recommended_books:
      test_pass = False
    if abs(recommends[1][i][1] - recommended_books_dist[i]) >= 0.05:
      test_pass = False
  if test_pass:
    print("You passed the challenge! ðŸŽ‰ðŸŽ‰ðŸŽ‰ðŸŽ‰ðŸŽ‰")
  else:
    print("You haven't passed yet. Keep trying!")

test_book_recommendation()