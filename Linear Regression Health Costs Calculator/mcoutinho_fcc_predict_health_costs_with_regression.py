# -*- coding: utf-8 -*-
"""mcoutinho_fcc_predict_health_costs_with_regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XB8O173ThTSpoB85eEjx3_ggfyszj_I0
"""

# Commented out IPython magic to ensure Python compatibility.
# Import libraries. You may or may not use all of these.
!pip install -q git+https://github.com/tensorflow/docs
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

try:
  # %tensorflow_version only exists in Colab.
#   %tensorflow_version 2.x
except Exception:
  pass
import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers

import tensorflow_docs as tfdocs
import tensorflow_docs.plots
import tensorflow_docs.modeling

# Import data
!wget https://cdn.freecodecamp.org/project-data/health-costs/insurance.csv
dataset = pd.read_csv('insurance.csv')
dataset.tail()

# Check for missing values
dataset.isnull().sum()

# Display data types of each column
dataset.dtypes

# Display value counts for the 'region' column
dataset.region.value_counts()

# One-hot encode the 'region' column
dataset = dataset.join(pd.get_dummies(dataset.region, prefix='region')).drop('region', axis=1)
dataset.head()

# Convert 'sex' column to numerical values
values = dataset.sex.astype('category')
labels['sex'] = values.cat.categories
dataset['sex'] = values.cat.codes
dataset.head()

# Convert 'smoker' column to numerical values
values = dataset.smoker.astype('category')
labels['smoker'] = values.cat.categories
dataset['smoker'] = values.cat.codes
dataset.head()

# Display the labels dictionary
labels

# Visualize the correlation matrix using a heatmap
import seaborn as sns

sns.heatmap(dataset.corr(), annot=True, fmt='.2f')
plt.show()

# Drop unnecessary columns
dataset.drop(['region_northeast', 'region_northwest', 'region_southeast', 'region_southwest'], axis=1, inplace=True)
dataset.drop(['sex', 'children'], axis=1, inplace=True)

# Visualize pairplots
sns.pairplot(dataset)
plt.show()

# Shuffle the rows
dataset = dataset.sample(frac=1)

# Split the dataset into training and testing sets
size = int(len(dataset) * .2)
train_dataset = dataset[:-size]
test_dataset = dataset[-size:]

print(len(dataset), len(train_dataset), len(test_dataset))

# Prepare the training and testing labels
train_labels = train_dataset['expenses']
train_dataset = train_dataset.drop('expenses', axis=1)
test_labels = test_dataset['expenses']
test_dataset = test_dataset.drop('expenses', axis=1)

# Build the neural network model
model = tf.keras.models.Sequential([
    tf.keras.layers.Input(shape=(len(train_dataset.keys()),)),
    tf.keras.layers.BatchNormalization(),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(1)
])
model.compile(
    optimizer=tf.keras.optimizers.RMSprop(0.05),
    loss='mse',
    metrics=['mae', 'mse']
)
model.summary()

# Define a callback for displaying training progress
class EpochDots(keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs):
        if epoch % 100 == 0:
            print()
            print('Epoch: {:d}, '.format(epoch), end='')
            for name, value in sorted(logs.items()):
                print('{}:{:0.4f}'.format(name, value), end=', ')
            print()
        print('.', end='')

# Train the model
r = model.fit(train_dataset, train_labels, epochs=500, verbose=0, callbacks=[EpochDots()])

# Evaluate the model on the test dataset
res = model.evaluate(test_dataset, test_labels, verbose=2)
print(res)

# RUN THIS CELL TO TEST YOUR MODEL. DO NOT MODIFY CONTENTS.
# Test model by checking how well the model generalizes using the test set.
loss, mae, mse = model.evaluate(test_dataset, test_labels, verbose=2)

print("Testing set Mean Abs Error: {:5.2f} expenses".format(mae))

if mae < 3500:
  print("You passed the challenge. Great job!")
else:
  print("The Mean Abs Error must be less than 3500. Keep trying.")

# Plot predictions.
test_predictions = model.predict(test_dataset).flatten()

a = plt.axes(aspect='equal')
plt.scatter(test_labels, test_predictions)
plt.xlabel('True values (expenses)')
plt.ylabel('Predictions (expenses)')
lims = [0, 50000]
plt.xlim(lims)
plt.ylim(lims)
_ = plt.plot(lims,lims)